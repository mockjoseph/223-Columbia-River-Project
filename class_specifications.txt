Class: `Dam`

Feature: `Dam::Dam()`

Purpose: Constructs a dam object by prompting user input for name and parent tributary.

Assumptions: Standard input provides valid strings.
Inputs:`std::cin` for name and parent\_name.
Outputs: None.
State Changes:Initializes `name` and `parent_name`.
Cases and Expected Behavior:
    When valid input is provided, the dam object is constructed correctly.
    If the user input is malformed, behavior is undefined (no input validation in scope).

Feature: `Dam::Dam(std::string name, std::string parent_name)`

Purpose: Constructs a dam object with specified values.

Assumptions: Provided strings are valid and meaningful.
Inputs: `name`, `parent_name` as strings.
Outputs: None.
State Changes: Sets `name` and `parent_name`.
Cases and Expected Behavior:
    When given valid inputs, the dam object reflects the data exactly.
    Empty strings may be accepted unless additional checks are applied.

---

Class: `Tributary 
Feature: `Tributary::Tributary()`

Purpose: Prompts user for tributary data and initializes all attributes.

Assumptions: Input values are valid (strings and integers).
Inputs: `std::cin` for name, length, basin size, discharge, parent\_name.
Outputs: None.
State Changes: Sets all member attributes.
Cases and Expected Behavior:
    Correctly constructs a tributary when input is valid.
    No validation behavior defined for out-of-range integers or empty strings.

Feature: `Tributary::Tributary(std::string name, int length, int basinSize, int discharge, std::string parent_name)`

Purpose: Constructs a tributary object using given values.

Assumptions: Inputs are valid and correspond to real-world units.
Inputs: `name`, `length`, `basinSize`, `discharge`, `parent_name`.
Outputs: None.
State Changes: Sets all attributes.
Cases and Expected Behavior:

    Object accurately reflects all parameters.
    Negative or nonsensical values may still be accepted if not checked.

---

Class: `RiverNode`

Feature: `RiverNode::RiverNode()`

Purpose: Constructs a blank node with no dam/tributary attached.

Assumptions: Node will be populated later.
Inputs: None.
Outputs: None.
State Changes:`dam`, `trib`, `left`, `right` set to `nullptr`.
Cases and Expected Behavior:

   Node is empty and safe to attach children or data later.


Feature: `RiverNode::RiverNode(...)` *(Tributary constructor)

Purpose: Constructs a node that wraps a tributary object.

Assumptions: Parameters define a valid tributary.
Inputs: Same as `Tributary` constructor.
Outputs: None.
State Changes: Allocates a `Tributary` and sets pointers.
Cases and Expected Behavior:
   Tributary is properly embedded in node.
   Left/right remain `nullptr`.

Feature: `RiverNode::RiverNode(...)` (Dam constructor)

Purpose: Constructs a node containing a dam object.

Assumptions: Name and parent\_name describe a valid dam.
Inputs: `name`, `parent_name`.
Outputs: None.
State Changes: Allocates `Dam` and sets pointers.
Cases and Expected Behavior:

    Node contains dam; child pointers remain unset.

Feature: `RiverNode::RiverNode(int type)`

Purpose: Initializes the node based on a type code: 0 = empty, 1 = tributary, 2 = dam.

Assumptions: Input is within allowed range.
Inputs: `int type`.
Outputs: None.
State Changes: Allocates corresponding data type (or none).
Cases and Expected Behavior:

    Type 1 → Tributary allocated
    Type 2 → Dam allocated
    Type 0 → No allocation

Feature: `RiverNode::RiverNode(const RiverNode& other)`

Purpose: Deep-copy constructor.

Assumptions: `other` is a valid RiverNode.
Inputs: Constant reference to another node.
Outputs: None.
State Changes: Deep copies dam or tributary, but not children.
Cases and Expected Behavior:

    Copies internal data safely.
    Left/right remain `nullptr`.

---

Class: `RiverTree`

Feature: `RiverTree::RiverTree()`
Purpose: Initializes a tree with a root node.

Assumptions: No existing tree structure present.
Inputs: None.
Outputs: None.
State Changes: Allocates root as a blank node.
Cases and Expected Behavior:

    Ready to accept children and build structure.

Feature: `RiverTree::add_node(RiverNode* root, RiverNode* node)`

Purpose: Adds a new node based on parent-child relationships.

Assumptions: `node` contains a valid `parent_name`.
Inputs: `root` (tree root), `node` (to insert).
Outputs: `bool` (true if added).
State Changes: Modifies tree structure.
Cases and Expected Behavior:

    Inserts under correct parent; inserts copy of parent to left, new node to right.
    Returns false if parent not found.

Feature: `RiverTree::find_node(RiverNode* root, std::string name)`

Purpose: Finds a node with a matching dam or tributary name.

Assumptions: All names are unique.
Inputs: `root`, `name`.
Outputs: `RiverNode*` or `nullptr`.
State Changes: None.
Cases and Expected Behavior:

    Recursively searches right, then left.
    Returns correct pointer or null.

Feature: `RiverTree::print_dams()` / `print_dams(RiverNode*)`

Purpose: Prints all dam nodes recursively.

Assumptions: Tree is non-empty or handles null.
Inputs: Optional node pointer.
Outputs: Formatted console output.
State Changes: None.
Cases and Expected Behavior:

    In-order traversal; prints dam names.

Feature: `RiverTree::print_tribs()` / `print_tribs(RiverNode*)`

Purpose: Prints all tributary nodes recursively.

Assumptions: Same as `print_dams`.
Inputs: Optional node pointer.
Outputs: Console output.
State Changes: None.
Cases and Expected Behavior:

    In-order traversal; prints tributary details.

Feature: `RiverTree::print_tree(...)`

Purpose: Prints the full tree structure with indentation.

Assumptions: Tree may be unbalanced.
Inputs: `root`, `depth` (optionally `tree_height`).
Outputs: Console layout.
State Changes: None.
Cases and Expected Behavior:
    Visually distinguishes depth with indentation.

Feature: `RiverTree::explore_tree()`

Purpose: Interactive traversal tool.

Assumptions: Tree has been built.
Inputs: User input during runtime.
Outputs: Console info about each node.
State Changes: Updates current pointer.
Cases and Expected Behavior:

    User can go upstream/downstream or exit.

---

Global Functions

Feature: `main()`

Purpose: Starts the Columbia River System application.

Assumptions: Console-based environment.
Inputs: None.
Outputs: `int` return code.
State Changes: Builds tree and accepts user interaction.
Cases and Expected Behavior:
    Runs interactive menu.
    Allows full tree creation and exploration.

Feature: `create_tree(RiverTree& tree)`

Purpose: Creates a predefined tree with hardcoded river/dam structure.

Assumptions: Tree is empty when passed.
Inputs: Reference to a RiverTree.
Outputs: None.
State Changes: Populates tree with known structure.
Cases and Expected Behavior:
Inserts Columbia River with tributaries and dams in correct order.
